<% provide(:title, 'Order') %>

<div id="map-container">
  <input id="pac-input" class="controls" type="text" placeholder="Search Box">
  <div id="map"></div>
</div>

<script type="text/javascript">
  var mapStyle = [{
    "featureType": "water",
    "elementType": "geometry",
    "stylers": [{"color": "#193341"}]
  }, {"featureType": "landscape", "elementType": "geometry", "stylers": [{"color": "#2c5a71"}]}, {
    "featureType": "road",
    "elementType": "geometry",
    "stylers": [{"color": "#29768a"}, {"lightness": -37}]
  }, {"featureType": "poi", "elementType": "geometry", "stylers": [{"color": "#406d80"}]}, {
    "featureType": "transit",
    "elementType": "geometry",
    "stylers": [{"color": "#406d80"}]
  }, {
    "elementType": "labels.text.stroke",
    "stylers": [{"visibility": "on"}, {"color": "#3e606f"}, {"weight": 2}, {"gamma": 0.84}]
  }, {"elementType": "labels.text.fill", "stylers": [{"color": "#ffffff"}]}, {
    "featureType": "administrative",
    "elementType": "geometry",
    "stylers": [{"weight": 0.6}, {"color": "#1a3541"}]
  }, {"elementType": "labels.icon", "stylers": [{"visibility": "off"}]}, {
    "featureType": "poi.park",
    "elementType": "geometry",
    "stylers": [{"color": "#2c5a71"}]
  }];
  handler = Gmaps.build('Google');
  handler.buildMap({
    provider: {
      zoom: 18,
      disableDefaultUI: true,
      styles: mapStyle
    },
    internal: {
      id: 'map'
    }, 
    function () {
      if (navigator.geolocation)
        navigator.geolocation.getCurrentPosition(displayOnMap);
    }
  });
  function displayOnMap(position) {
    var marker = handler.addMarker({
      lat: position.coords.latitude,
      lng: position.coords.longitude
    });
    handler.map.centerOn(marker);
  };

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
 
 // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var markers = [];
  // [START region_getplaces]
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
  }
  // Clear out the old markers.
  markers.forEach(function(marker) {
    marker.setMap(null);
  });
  markers = [];

  // For each place, get the icon, name and location.
  var bounds = new google.maps.LatLngBounds();
  places.forEach(function(place) {
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };
    // Create a marker for each place.
    markers.push(new google.maps.Marker({
      map: map,
      icon: icon,
      title: place.name,
      position: place.geometry.location
    }));

    if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
  });
  map.fitBounds(bounds);
</script>